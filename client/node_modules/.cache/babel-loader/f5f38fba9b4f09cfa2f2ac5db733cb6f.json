{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/yaroslav/desktop/newFull/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","token","auth","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,SACCC,WADD,EAECC,YAFD,EAGCC,UAHD,EAICC,aAJD,EAKCC,UALD,EAMCC,cAND,EAOCC,gBAPD,EAQCC,aARD,QASO,SATP;AAUA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAUC,QAAV,KAAsB;AACjDD,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEV;AAAP,GAAD,CAAR;AAEAH,EAAAA,KAAK,CAACc,GAAN,CAAU,gBAAV,EAA4BC,WAAW,CAACH,QAAD,CAAvC,EACII,IADJ,CACSC,GAAG,IAAEN,QAAQ,CAAC;AACnBE,IAAAA,IAAI,EAAEX,WADa;AAEnBgB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFM,GAAD,CADtB,EAKIC,KALJ,CAKUC,GAAG,IAAI;AACbV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACRE,MAAAA,IAAI,EAAET;AADE,KAAD,CAAR;AAGA,GAVJ;AAWF,CAdM;AAeP,OAAO,MAAMW,WAAW,GAAGH,QAAQ,IAAI;AACpC,QAAMY,KAAK,GAAGZ,QAAQ,GAAGa,IAAX,CAAgBD,KAA9B;AACA,QAAME,MAAM,GAAE;AACXC,IAAAA,OAAO,EAAC;AACL,sBAAgB;AADX;AADG,GAAd;;AAKA,MAAGH,KAAH,EAAS;AACNE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAA+BH,KAA/B;AACF;;AACD,SAAOE,MAAP;AACF,CAXM","sourcesContent":["import axios from 'axios';\nimport {returnErrors} from './errorActions';\nimport {\n\tUSER_LOADED,\n\tUSER_LOADING,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT_SUCCESS,\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL\n} from \"./types\";\nexport const loadUser = () => (dispatch,getState)=> {\n   dispatch({type: USER_LOADING});\n   \n   axios.get('/api/auth/user', tokenConfig(getState))\n      .then(res=>dispatch({\n      \ttype: USER_LOADED,\n      \tpayload: res.data\n      }))\n      .catch(err => {\n      \tdispatch(returnErrors(err.response.data, err.response.status));\n      \tdispatch({\n      \t\ttype: AUTH_ERROR\n      \t});\n      });\n};\nexport const tokenConfig = getState => {\n   const token = getState().auth.token;\n   const config ={\n      headers:{\n         \"Content-type\": \"application/json\"\n      }\n   }\n   if(token){\n      config.headers['x-auth-token']=token;\n   }\n   return config;\n}"]},"metadata":{},"sourceType":"module"}